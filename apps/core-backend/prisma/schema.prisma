generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id         String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  norm       String
  nik        String?
  fullname   String
  parentname String?
  address    String
  phone      String?
  email      String?
  age        Int?                      @default(0)
  sex        String                    @default("L")
  type       String?                   @default("human")
  blood      String?                   @default("-")
  birthAt    DateTime?
  createdAt  DateTime?                 @default(now()) @db.Timestamptz(6)
  deletedAt  DateTime?
  clinicsId  String?                   @db.Uuid
  parentId   String?                   @db.Uuid
  Clinics    Clinics?                  @relation(fields: [clinicsId], references: [id])
  parent     Patient?                  @relation("ParentChildren", fields: [parentId], references: [id])
  children   Patient[]                 @relation("ParentChildren")
  mr         Patient_medical_records[]
}

model Patient_medical_records {
  id           String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  visitAt      DateTime               @default(now())
  visitLabel   String?
  queue        String?
  doctor       String
  status       String?                @default("e1")
  patientId    String?                @db.Uuid
  poliId       String?                @db.Uuid
  assessment   Patient_assessment[]
  Patient      Patient?               @relation(fields: [patientId], references: [id])
  poli         Poli?                  @relation(fields: [poliId], references: [id])
  prescription Patient_prescription[]
  vitalSign    Patient_vital_sign[]
}

model Patient_vital_sign {
  id                        Int                      @id @default(autoincrement())
  height                    Decimal?                 @default(0)
  weight                    Decimal?                 @default(0)
  temperature               Decimal                  @default(0)
  systole                   Int?                     @default(0)
  diastole                  Int?                     @default(0)
  pulse                     Int?                     @default(0)
  respiration               Int?                     @default(0)
  saturation                Int?                     @default(0)
  sugar                     Decimal?                 @default(0)
  cholesterol               Decimal?                 @default(0)
  pain                      String?
  allergic                  String?                  @default("n/a")
  deletedAt                 DateTime?
  patient_medical_recordsId String?                  @db.Uuid
  Patient_medical_records   Patient_medical_records? @relation(fields: [patient_medical_recordsId], references: [id])
}

model Patient_assessment {
  id                        Int                              @id @default(autoincrement())
  subjective                String                           @default("none")
  objective                 String                           @default("none")
  assessment                String                           @default("none")
  plan                      String                           @default("none")
  diagnose                  String                           @default("none")
  icd10Code                 String?
  icd10                     ICD10?                           @relation(fields: [icd10Code], references: [code])
  icd9CMCode                String?
  icd9CM                    ICD9CM?                          @relation(fields: [icd9CMCode], references: [code])
  deletedAt                 DateTime?
  patient_medical_recordsId String?                          @db.Uuid
  Patient_medical_records   Patient_medical_records?         @relation(fields: [patient_medical_recordsId], references: [id])
  anathomy                  Patient_assessment_on_anathomy[]
}

model Patient_assessment_on_anathomy {
  id                   Int                 @id @default(autoincrement())
  part                 String              @default("")
  description          String              @default("")
  patient_assessmentId Int?
  Patient_assessment   Patient_assessment? @relation(fields: [patient_assessmentId], references: [id])
}

model Patient_prescription {
  id                        Int                      @id @default(autoincrement())
  createdAt                 DateTime?                @default(now()) @db.Timestamptz(6)
  medicineId                Int?
  Medicine                  Medicine?                @relation(fields: [medicineId], references: [id])
  type                      String?
  usage                     String?
  dosage                    String?
  interval                  String?
  quantity                  Int
  deletedAt                 DateTime?
  patient_medical_recordsId String?                  @db.Uuid
  Patient_medical_records   Patient_medical_records? @relation(fields: [patient_medical_recordsId], references: [id])
}

model Pharmacy_Task {
  id               Int       @id @default(autoincrement())
  norm             String
  assessmentReffId String?
  status           String?
  pharmacist       String?
  createdDate      String?
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  deletedAt        DateTime?
  clinicsId        String?   @db.Uuid
  Clinics          Clinics?  @relation(fields: [clinicsId], references: [id])

  @@index(fields: [clinicsId, assessmentReffId])
}

model Poli {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  color                   String?                   @default("#87CEEB")
  currentDate             String?
  counter                 Int?                      @default(0)
  name                    String
  alias                   String?                   @default("A")
  doctor                  String                    @default("dr whoisname")
  isActive                Boolean?                  @default(false)
  createdAt               DateTime?                 @default(now()) @db.Timestamptz(6)
  deletedAt               DateTime?
  clinicsId               String?                   @db.Uuid
  Patient_medical_records Patient_medical_records[]
  Clinics                 Clinics?                  @relation(fields: [clinicsId], references: [id])
}

model Departments {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  color       String?   @default("#87CEEB")
  currentDate String?
  counter     Int?      @default(0)
  name        String    @default("A")
  alias       String
  isActive    Boolean?  @default(false)
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  deletedAt   DateTime?
  clinicsId   String?   @db.Uuid
  Clinics     Clinics?  @relation(fields: [clinicsId], references: [id])
  usersId     String?   @db.Uuid
  manager     Users?    @relation(fields: [usersId], references: [id])
}

model Queue_history {
  id          Int       @id @default(autoincrement())
  deletedAt   DateTime?
  patientNik  String?
  patientName String?
  queueAt     DateTime?
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  ticket      String?
  Clinic      String?
  Poli        String?
}

enum Role {
  OWNER
  ADMIN
  SUPERADMIN
  DOCTOR
  PHARMACY
}

model Users {
  id                       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roles                    Role
  email                    String        @unique
  fullname                 String
  address                  String?
  phone                    String?
  photo                    String?       @default("/images/user.png")
  password                 String
  isActive                 Boolean?      @default(false)
  token                    String?
  email_verification_token String?
  reset_password_token     String?
  createdAt                DateTime?     @default(now()) @db.Timestamptz(6)
  clinicsId                String?       @db.Uuid
  Accounts                 Accounts[]
  Departments              Departments[]
  session                  Session[]
  Clinics                  Clinics?      @relation(fields: [clinicsId], references: [id])
}

model Session {
  id        Int       @id @default(autoincrement())
  authToken String
  usersId   String    @db.Uuid
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?
  deletedAt DateTime?
  user      Users     @relation(fields: [usersId], references: [id])
}

model Notifications {
  id          Int      @id @default(autoincrement())
  owner       String
  when        DateTime
  forwhom     String?
  isRead      String?
  title       String
  subTitle    String?
  description String?
  sourceType  String?
  source      String?
  clinicsId   String?  @db.Uuid
  Clinics     Clinics? @relation(fields: [clinicsId], references: [id])
}

model Setting {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  type      String
  value     String?
  headerId  String?
  clinicsId String?  @db.Uuid
  Clinics   Clinics? @relation(fields: [clinicsId], references: [id])
}

model Clinics {
  id               String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  email            String
  type             CLINICTYPE          @default(PRIMARY)
  specialist       CLINICSPECIALIST    @default(OTHER)
  address          String
  phone            String
  taxId            String?
  license          String?
  dueTo            DateTime?
  photo            String              @default("/images/clinic.png")
  clientId         String?
  clientSecret     String?
  accountsId       String?             @db.Uuid
  Accounts         Accounts?           @relation(fields: [accountsId], references: [id])
  Notifications    Notifications[]
  Patient          Patient[]
  Pharmacy_Task    Pharmacy_Task[]
  Poli             Poli[]
  Category         ProductCategories[]
  Setting          Setting[]
  Suppliers        Suppliers[]
  users            Users[]
  operationalHours regularHours[]
  Departments      Departments[]
  MedicineCategory MedicineCategory[]
}

model regularHours {
  id        Int       @id @default(autoincrement())
  openDay   DAYS_TYPE
  closeDay  DAYS_TYPE
  openTime  String    @default("09:00")
  closeTime String    @default("17:00")
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  clinicsId String?   @db.Uuid
  Clinics   Clinics?  @relation(fields: [clinicsId], references: [id])
}

model Memberships {
  id            String     @id
  name          String
  price         BigInt     @default(0)
  currency      String     @default("IDR")
  activeTo      DateTime?  @default(dbgenerated("(now() + '1 year'::interval)"))
  days          Int        @default(30)
  afterDiscount Int?       @default(0)
  discount      Int?       @default(0)
  Accounts      Accounts[]
}

model MAPNotifications {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  body      Json?
}

model SubscriptionSchedule {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  interval            Int      @default(1)
  interval_unit       String   @default("month")
  max_interval        Int      @default(12)
  start_time          DateTime @default(dbgenerated("(now() + '1 day'::interval)"))
  retry_interval      Int      @default(1)
  retry_interval_unit String   @default("day")
  retry_max_interval  Int      @default(3)
  membershipsId       String
}

model Payments {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payAt         DateTime?
  description   String
  amount        Decimal
  startAt       DateTime?    @default(now()) @db.Timestamptz(6)
  interval      Int          @default(1)
  interval_unit INTERVALUNIT @default(MONTH)
  dueDate       DateTime
  isSuspend     Boolean      @default(true)
  status        String       @default("init")
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  accountsId    String?      @db.Uuid
  Accounts      Accounts?    @relation(fields: [accountsId], references: [id])
}

model Accounts {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usersId       String?      @db.Uuid
  taxId         String?
  isSuperAdmin  Boolean      @default(true)
  isActive      Boolean      @default(false)
  verification  String       @default("na")
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  deletedAt     DateTime?
  membershipsId String?
  subscription  Memberships? @relation(fields: [membershipsId], references: [id])
  profile       Users?       @relation(fields: [usersId], references: [id])
  payments      Payments[]
  Clinics       Clinics[]
}

model Addresses {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  type      String?
  name      String
  address   String
  zipcode   String
  city      String
  province  String
  country   String
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
}

model Orders {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String?
  customerId  String?     @db.Uuid
  name        String?
  phone       String?
  email       String?
  address     String?
  payment     Int?        @default(0)
  paymentType String      @default("cash")
  changes     Int?        @default(0)
  discount    Int?        @default(0)
  total       Int?        @default(0)
  createdAt   DateTime?   @default(now()) @db.Timestamptz(6)
  clinicId    String?     @db.Uuid
  deletedAt   DateTime?   @db.Timestamptz(6)
  orderItem   OrderItem[]
}

model OrderItem {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  quantity      Int       @default(1)
  price         Int       @default(0)
  discount      Int?      @default(0)
  afterDiscount Int?      @default(0)
  total         Int       @default(0)
  ordersId      String    @db.Uuid
  productsId    String    @db.Uuid
  order         Orders    @relation(fields: [ordersId], references: [id])
  product       Products  @relation(fields: [productsId], references: [id])
}

model ProductCategories {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  isActive  Boolean?   @default(true)
  createdAt DateTime?  @default(now()) @db.Timestamptz(6)
  clinicsId String     @db.Uuid
  Clinic    Clinics    @relation(fields: [clinicsId], references: [id])
  Products  Products[]
}

model Products {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  categoryId  String            @db.Uuid
  description String?
  url         String?
  price       Int               @default(0)
  quantity    Int               @default(0)
  discount    Int               @default(0)
  photo1      String?
  photo2      String?
  photo3      String?
  photo4      String?
  isActive    Boolean           @default(true)
  createdAt   DateTime?         @default(now()) @db.Timestamptz(6)
  suppliersId String?           @db.Uuid
  orderItem   OrderItem[]
  category    ProductCategories @relation(fields: [categoryId], references: [id])
  supplier    Suppliers?        @relation(fields: [suppliersId], references: [id])
}

model Suppliers {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company     String?
  fullname    String
  phone       String
  email       String?
  address     String
  description String?
  clinicsId   String?    @db.Uuid
  createdAt   DateTime?  @default(now()) @db.Timestamptz(6)
  Products    Products[]
  clinics     Clinics?   @relation(fields: [clinicsId], references: [id])
}

model Medicine {
  id                   Int                    @id @default(autoincrement())
  title                String
  price                Int
  stock                Int
  discount             Int?
  imageUrl             String?
  kfaCode              String?
  categoryId           Int?
  category             MedicineCategory?      @relation(fields: [categoryId], references: [id])
  Patient_prescription Patient_prescription[]
}

model MedicineCategory {
  id        Int        @id @default(autoincrement())
  name      String
  clinicsId String?    @db.Uuid
  clinics   Clinics?   @relation(fields: [clinicsId], references: [id])
  Medicine  Medicine[]
}

model ICD10 {
  code               String               @id
  strt               String
  sab                String
  Patient_assessment Patient_assessment[]
}

model ICD9CM {
  code               String               @id
  str                String
  sab                String
  Patient_assessment Patient_assessment[]
}

enum transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}

enum TASK_STATUS {
  TODO
  INPROGRESS
  PENDING
  CANCELED
  REMOVED
}

enum CLINICSPECIALIST {
  DENTAL
  INTERNAL
  OTHER
}

enum CLINICTYPE {
  PRIMARY
  SPECIALIST
  MULTI
  PET
}

enum DAYS_TYPE {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturda
}

enum INTERVALUNIT {
  MONTH
  YEAR
}
